interface http-imports {
    // status code
    type status = u16
    // headers as key value pairs
    type headers = list<tuple<string, string>>
    // request uri
    type uri = string
    // body as bytes
    type body = list<u8>
    // request method
    type method = string
    // request object
    record request{
        method: method,
        uri: uri,
        headers: headers,
        body: option<body>,
    }
    // response object
    record response{
        status: status,
        headers: headers,
        body: option<body>,
    }
    // HTTP errors returned by the runtime.
    enum http-error {
        // The request failed due to a network error.
        network-error,
        // The request failed due to a timeout.
        timeout,
        // The request failed due to a invalid url.
        invalid-url,
        // The request failed due to a forbidden destination.
        destination-not-allowed,
        // The request failed due to over requests limit.
        too-many-requests,
        // The request failed due to invalid request 
        invalid-request,
    }
    // Fetch redirect policy
    enum redirect-policy {
        // Follow redirects.
        follow,
        // Do not follow redirects.
        error,
        // Follow redirects, but do not follow redirects to cross-origin destinations.
        manual,
    }
    // HTTP fetch request option
    record fetch-options{
        // The request timeout in milliseconds.
        timeout: u32,
        // Decompress the response body.
        decompress: bool,
        // Follow redirects.
        redirect: redirect-policy,
    }
    // request remote function
    fetch: func(req: request, options: fetch-options) -> result<response,http-error>
}


// world imports and exports
world http-fetch {
    import http-fetch: http-imports
}